<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiallize
levelGridWidth = 90;
levelGridHeight = 45;
biomeCountMax = 8;
biomeCountMin = 3

//random_set_seed(12345)
randomize();

biomeCount = round( random_range( biomeCountMin , biomeCountMax ) );
biomeGeneratorsList = ds_list_create();

levelGrid = ds_grid_create( levelGridWidth , levelGridHeight );

stage = 0

r = 100;
rsq = r * r;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///place biome generators

repeat( biomeCount ) //place biome generators at random locations on grid and store them in the list
{
    var biomeGenerator = instance_create( 0 , 0 , obj_genereateLevelBiome );
    with( biomeGenerator )
    {
        coord_x = irandom( other.levelGridWidth );
        coord_y = irandom( other.levelGridHeight );
        pos_x = TransformRectToPix_x( coord_x );
        pos_y = TransformRectToPix_y( coord_y );
    }
    ds_list_add( biomeGeneratorsList ,  biomeGenerator );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stages of level generation

switch( stage )
{
    case 0: // expanding biomes
        repeat( 1 )
        {
            var change = false;
            ds_list_shuffle( biomeGeneratorsList );
            
            for( var i = 0 ; i &lt; levelGridWidth ; i++ ) // loop thru x grid
            {
                for( var j = 0 ; j &lt; levelGridHeight ; j++ ) // loop thru y grid
                {
                    if ( levelGrid[# i , j ] == 0 ) // if tile not already set to biome type
                    {
                        change = true       
                        var pos_x = TransformRectToPix_x( i ), pos_y = TransformRectToPix_y( j );
                        
                        for( var k = 0 ; k &lt; biomeCount ; k++ ) // loop thru biome generators
                        {
                            var biomeGenerator = biomeGeneratorsList[| k ];
                            
                            if ( PointDistanceSq( pos_x , pos_y , biomeGenerator.pos_x , biomeGenerator.pos_y ) &lt; rsq * biomeGenerator.rMult )
                            {
                                levelGrid[# i , j ] = biomeGenerator.biomeID;
                            }                        
                        }
                    }
                }
            }
            
            if ( !change )
            {
                stage++;
                break;
            }
            r += triangleHeight;
            rsq = sqr( r );
        }
    break;
    
    case 1:
        repeat( irandom_range( 5 , 20 ) )
        {
            for( var i = 0 ; i &lt; levelGridWidth ; i++ ) // loop thru x grid
            {
                for( var j = 0 ; j &lt; levelGridHeight ; j++ ) // loop thru y grid
                {
                    var sum = 0;
                    var counter = 0;
                    
                    if ( ( i + j ) % 2 == 1  )
                    {  
                        if ( j - 1 &gt;= 0 )
                        {
                            counter++;
                            sum += levelGrid[# i , j - 1 ];                        
                        }
                    }
                    else
                    {
                        if ( j + 1 &lt; levelGridHeight )
                        {
                            counter++;
                            sum += levelGrid[# i , j + 1 ] ;                        
                        }
                    }
                        
                    if ( i - 1 &gt;= 0 )
                    {
                        counter++;
                        sum += levelGrid[# i - 1 , j ];    
                    }
                    
                    if ( i + 1 &lt; levelGridWidth )
                    {
                        counter++;
                        sum += levelGrid[# i + 1 , j ];        
                    }
                    
                    if ( counter != 0 )
                    {
                        levelGrid[# i , j ] = sum / counter;
                    }
                }
            }                
        }
        
        for( var i = 0 ; i &lt; levelGridWidth ; i++ ) // loop thru x grid
        {
            for( var j = 0 ; j &lt; levelGridHeight ; j++ ) // loop thru y grid
            {
                levelGrid[# i , j ] = round( levelGrid[# i , j ] );
            }
        }
        
        stage++;
        
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
var col = 10;


if ( true )
{
    var c , i , j , mod3;

    for( var i = 0 ; i &lt; levelGridWidth  ; i ++ )
    {
        for( var j = 0 ; j &lt; levelGridHeight ; j ++ )
        {
            if ( ( i + j ) % 2 == 1  )
            {
               /* switch( levelGrid[# i , j ] )
                {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        draw_sprite_ext(sprite0,1, TransformRectToPix_x( i ) , TransformRectToPix_y( j ) , 1 , 1 , 0 , make_colour_hsv(  levelGrid[# i , j ] * col , 255 , 255 )  , 1 );
                    break;

                    default:
                         draw_sprite(sprite0,1, TransformRectToPix_x( i ) , TransformRectToPix_y( j ) );
                    break;
                }*/
                
                if ( levelGrid[# i , j ] == 0 )
                {
                    draw_sprite(sprite0,1, TransformRectToPix_x( i ) , TransformRectToPix_y( j ) );
                }
                else
                {
                    draw_sprite_ext(sprite0,1, TransformRectToPix_x( i ) , TransformRectToPix_y( j ) , 1 , 1 , 0 , make_colour_hsv(  levelGrid[# i , j ] * col , 255 , 255 )  , 1 );
                }
            }
            else
            {
                /*switch( levelGrid[# i , j ] )
                {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        draw_sprite_ext(sprite0,0, TransformRectToPix_x( i ) , TransformRectToPix_y( j ) , 1 , 1 , 0 , make_colour_hsv(  levelGrid[# i , j ] * col , 255 , 255 )  , 1 );
                    break;

                    default:
                         draw_sprite(sprite0,0, TransformRectToPix_x( i ) , TransformRectToPix_y( j ) );
                    break;;
                }*/
                
                if ( levelGrid[# i , j ] == 0 )
                {
                    draw_sprite(sprite0,0, TransformRectToPix_x( i ) , TransformRectToPix_y( j ) );
                }
                else
                {
                    draw_sprite_ext(sprite0,0, TransformRectToPix_x( i ) , TransformRectToPix_y( j ) , 1 , 1 , 0 , make_colour_hsv(  levelGrid[# i , j ] * col , 255 , 255 )  , 1 );
                }
            }
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
